<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		actionBarVisible="true"
		initialize="onInitialize()"
		destructionPolicy="never"
		creationComplete="view1_creationCompleteHandler(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" >
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.dialog.Dialog;
			import com.distriqt.extension.dialog.DialogView;
			import com.distriqt.extension.dialog.PickerDialogView;
			import com.distriqt.extension.dialog.builders.AlertBuilder;
			import com.distriqt.extension.dialog.builders.PickerDialogBuilder;
			import com.distriqt.extension.dialog.events.DialogViewEvent;
			import com.distriqt.extension.dialog.objects.DialogAction;
			import com.hurlant.crypto.hash.SHA1;
			import com.hurlant.util.Hex;
			
			import mx.events.FlexEvent;
			
			import spark.primitives.Rect;
			
			import Utilities.Export;
			import Utilities.Trace;
			
			import databaseclasses.BgReading;
			import databaseclasses.BlueToothDevice;
			import databaseclasses.CommonSettings;
			import databaseclasses.LocalSettings;
			
			import events.SettingsServiceEvent;
			
			import model.ModelLocator;
			
			import services.DialogService;
			[ResourceBundle("settingsview")]
			[ResourceBundle("calibrationservice")]
			[ResourceBundle("alarmservice")]
			[ResourceBundle("texttospeech")]
						
			[Bindable]
			private static var detailedTracingOnOrOffText:String = "";
			[Bindable]
			private static var nsLogOnOffText:String = "";
			[Bindable]
			private static var alwaysOnNotificationTextOnOrOff:String = "";
			[Bindable]
			private static var healthkitStoreOnOrOff:String = "";
			[Bindable]
			private static var chosenUnitText:String = "";
			[Bindable]
			private static var lowValueText:String = "";
			[Bindable]
			private static var highValueText:String = "";
			[Bindable]
			private static var nightScoutUrl:String = "";
			[Bindable]
			private static var nightScoutAPI_SECRET:String = "";
			[Bindable]
			private static var transmitterIdText:String="";
			[Bindable]
			private static var transmitterTypeText:String="";
			[Bindable]
			private static var checkUpdatesOnOffText:String="";
			[Bindable]
			private static var dexcomShareAccountName:String="";
			[Bindable]
			private static var dexcomSharePassword:String="";
			[Bindable]
			private static var dexcomSharePasswordShownOnScreen:String="";
			[Bindable]
			private static var dexcomShareSerialNumber:String="";
			[Bindable]
			private static var dexcomShareOnOffText:String="";
			[Bindable]
			private static var speakReadingsOnOffText:String="";
			[Bindable]
			private static var speakReadingsIntervalValue:String="";
			[Bindable]
			private static var speakReadingsTrendOnOffText:String="";
			[Bindable]
			private static var speakReadingsDeltaOnOffText:String="";
			[Bindable]
			private static var speakReadingsLanguageText:String="en-US";
			[Bindable]
			private static var versionText:String="";
			[Bindable]
			private static var dexcomShareURL:String="";
			[Bindable]
			private static var overrideMuteTextOnOrOff:String = "";
			[Bindable]
			private static var appInactiveAlertTextOnOrOff:String = "";

			private static var resetColorTimer:Timer;
			
			public static function init():void {
				LocalSettings.instance.addEventListener(SettingsServiceEvent.SETTING_CHANGED, peripheralTypeSettingChanged);
				CommonSettings.instance.addEventListener(SettingsServiceEvent.SETTING_CHANGED, peripheralTypeSettingChanged);
			}
			
			private function onInitialize():void {
				title = ModelLocator.resourceManagerInstance.getString('settingsview','title');
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED) == "true") {
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
					groupEnableAndDisableTracing.alpha = 0.25;
					groupsendTracingViaEmail.alpha = 1;
				} else {
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
					groupEnableAndDisableTracing.alpha = 1;
					groupsendTracingViaEmail.alpha = 0.25;
				}
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true") {
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mgdl');
				} else {
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mmol');
				}
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) != "true") {
					lowValueText = (Math.round(((BgReading.mgdlToMmol((new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK))))) * 10)) / 10).toString();
					highValueText = (Math.round(((BgReading.mgdlToMmol((new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK))))) * 10)) / 10).toString();
				} else {
					lowValueText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK);
					highValueText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK);
				}
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_NSLOG) == "true") {
					nsLogOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					nsLogOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_ALWAYS_ON_NOTIFICATION) == "true") {
					alwaysOnNotificationTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					alwaysOnNotificationTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_APP_INACTIVE_ALERT) == "true"){
					appInactiveAlertTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					appInactiveAlertTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_OVERRIDE_MUTE) == "true") {
					overrideMuteTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					overrideMuteTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_HEALTHKIT_STORE_ON) == "true") {
					healthkitStoreOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					healthkitStoreOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				nightScoutUrl = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_AZURE_WEBSITE_NAME);
				nightScoutAPI_SECRET = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_API_SECRET);
				
				transmitterIdText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID);
				transmitterTypeText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE);
				if (BlueToothDevice.needsTransmitterId()) {
					groupTransmitterId.alpha = 1;
				} else {
					groupTransmitterId.alpha = 0.25;
				}
				
				dexcomShareAccountName = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_ACCOUNTNAME);
				dexcomSharePassword = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_PASSWORD);
				dexcomSharePasswordShownOnScreen = replaceByStars(dexcomSharePassword);
				dexcomShareSerialNumber = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_SERIALNUMBER);
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_ON) == "true") {
					dexcomShareOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					dexcomShareOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				dexcomShareURL = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_US_URL) == "true" ?
					ModelLocator.resourceManagerInstance.getString("settingsview","dexcom_us_url")
					:
					ModelLocator.resourceManagerInstance.getString('settingsview','dexcom_non_us_url');
				changeDexcomShareStatus();
				
				speakReadingsIntervalValue = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_READINGS_INTERVAL);
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_READINGS_ON) == "true") {
					speakReadingsOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
					changeSpeakReadingsStatus();
				} else {
					speakReadingsOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
					changeSpeakReadingsStatus();
				}
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_TREND_ON) == "true") {
					speakReadingsTrendOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					speakReadingsTrendOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_DELTA_ON) == "true") {
					speakReadingsDeltaOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					speakReadingsDeltaOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				//Set previously selected language
				//default value is language code as stored in settings, goal is to set the value as set in ttslanguagelistdescription list
				//but if the code is not found, it stays language code
				speakReadingsLanguageText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LANGUAGE);
				var languagePackCodes:Array = (ModelLocator.resourceManagerInstance.getString('texttospeech','ttslanguagelistcodes') as String).split(",");
				var languagePackDescriptions:Array = (ModelLocator.resourceManagerInstance.getString('texttospeech','ttslanguagelistdescription') as String).split(",");
				for(var i:int = 0; i < languagePackCodes.length; i++)
				{
					if(languagePackCodes[i] == speakReadingsLanguageText)
					{
						speakReadingsLanguageText = languagePackDescriptions[i];
						break;
					}
				}
				
				//Set App Updates related states
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_APP_UPDATE_NOTIFICATIONS_ON) == "true") {
					checkUpdatesOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					checkUpdatesOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				LocalSettings.instance.addEventListener(SettingsServiceEvent.SETTING_CHANGED, settingChanged);
				CommonSettings.instance.addEventListener(SettingsServiceEvent.SETTING_CHANGED, settingChanged);

				versionText = LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_APPLICATION_VERSION);
				
				if (BlueToothDevice.isBlueReader() || BlueToothDevice.isLimitter() || BlueToothDevice.isFollower()) {
					batteryalertgroup.visible = false;
					batteryalertgroup.enabled = false;
					batteryalertgroup.includeInLayout = false;
				}
				
				if (BlueToothDevice.isFollower()) {
					calibrationalertgroup.enabled = false;
					calibrationalertgroup.visible = false;
					calibrationalertgroup.includeInLayout = false;
				}
				
				if (ModelLocator.IS_PRODUCTION) {
					groupAppUpdates.visible = false;
					groupAppUpdates.includeInLayout = false;
				}
			}
			
			private static function setLanguageSpecificStrings():void {
				
			}
			
			private static function replaceByStars(input:String):String {
				if (input == null)
					return "****";
				var returnValue:String = "";
				for (var i:int =  0; i < input.length;i++) {
					returnValue += "*";
				}
				return returnValue;
			}
			
			private static function peripheralTypeSettingChanged(event:SettingsServiceEvent):void {
				if (event.data == CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) {
					if (BlueToothDevice.needsTransmitterId() && (transmitterIdText == "BLU00000" || transmitterIdText == "00000" || transmitterIdText == "")) {
						SettingsView.requestNewTransmitterId();
					}
					if (BlueToothDevice.isFollower()) {
						if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_AZURE_WEBSITE_NAME) == CommonSettings.DEFAULT_SITE_NAME) {
							SettingsView.nightScoutUrlChangeDialog();
						}
					}
				}				
			}
			
			private function settingChanged(event:SettingsServiceEvent):void {
				if (event.data == CommonSettings.COMMON_SETTING_TRANSMITTER_ID) {
					transmitterIdText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID);
				} else if (event.data == CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) {
					transmitterTypeText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE);

					if (BlueToothDevice.needsTransmitterId()) {
						groupTransmitterId.alpha = 1;
					} else {
						groupTransmitterId.alpha = 0.25;
					}
					changeDexcomShareStatus();
					changeSpeakReadingsStatus();
					if (BlueToothDevice.isBlueReader() || BlueToothDevice.isLimitter() || BlueToothDevice.isFollower()) {
						batteryalertgroup.visible = false;
						batteryalertgroup.enabled = false;
						batteryalertgroup.includeInLayout = false;
					} else {
						batteryalertgroup.visible = true;
						batteryalertgroup.enabled = true;
						batteryalertgroup.includeInLayout = true;
					}
					if (BlueToothDevice.isFollower()) {
						calibrationalertgroup.enabled = false;
						calibrationalertgroup.visible = false;
						calibrationalertgroup.includeInLayout = false;
					} else {
						calibrationalertgroup.enabled = true;
						calibrationalertgroup.visible = true;
						calibrationalertgroup.includeInLayout = true;
					}
				}
			}
			
			protected function sendTracingViaEmail_clickHandler(event:MouseEvent):void {
				rect9.color = uint("0xD3D3D3");
				rect10.color = uint("0xD3D3D3");
				setResetColorTimer();
				Trace.sendTraceFile();
				LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED, "false");
				detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				groupEnableAndDisableTracing.alpha = 1;
				groupsendTracingViaEmail.alpha = 0.25;
			}
			
			protected function detailedTracing_clickHandler(event:MouseEvent):void {
				rect7.color = uint("0xD3D3D3");
				rect8.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED) == "true") {
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED, "true");
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
					groupEnableAndDisableTracing.alpha = 0.25;
					groupsendTracingViaEmail.alpha = 1;
				}
			}
			
			public static function nightScoutUrlChangeDialog():void {
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_url_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_url_message"))
					.addTextField(nightScoutUrl,"")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				alert.addEventListener(DialogViewEvent.CLOSED, nightscouturlentered);
				DialogService.addDialog(alert);
				
				function nightscouturlentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					
					if (event.values.length < 1)
						return;
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_AZURE_WEBSITE_NAME, event.values[0] as String);
					nightScoutUrl = event.values[0] as String;
				}
			}
			
			private function nightScoutUrl_clickHandler(event:MouseEvent):void {
				rect1.color = uint("0xD3D3D3");
				rect2.color = uint("0xD3D3D3");
				setResetColorTimer();

				nightScoutUrlChangeDialog();
			}
			
			private function nightScoutApiSecret_clickHandler(event:MouseEvent):void {
				rect3.color = uint("0xD3D3D3");
				rect4.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_api_secret_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_api_secret_message"))
					.addTextField(nightScoutAPI_SECRET, "")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, apisecretentered);
				
				function apisecretentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					var hash:SHA1 = new SHA1();
					var result:String = Hex.fromArray(hash.hash(Hex.toArray(Hex.fromString(event.values[0] as String))));
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_API_SECRET, event.values[0] as String);
					nightScoutAPI_SECRET = event.values[0] as String;
				}
			}
			
			private function changeUnit_clickHandler(event:MouseEvent):void {
				rect13.color = uint("0xD3D3D3");
				rect14.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL, "false");
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mmol');
					lowValueText = (Math.round(((BgReading.mgdlToMmol((new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK))))) * 10)) / 10).toString();
					highValueText = (Math.round(((BgReading.mgdlToMmol((new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK))))) * 10)) / 10).toString();
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL, "true");
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mgdl');
					lowValueText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK);
					highValueText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK);
				}
			}
			
			private function changeLowValue_clickHandler(event:MouseEvent):void {
				rect15.color = uint("0xD3D3D3");
				rect16.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","low_value"))
					.addTextField("", ModelLocator.resourceManagerInstance.getString("settingsview","low_value"), false, CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true" ? 4:8)
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				alert.addEventListener(DialogViewEvent.CLOSED, lowValueentered);
				DialogService.addDialog(alert);
			}
			
			private static function lowValueentered(event:DialogViewEvent):void {
				if (event.index == 1) {
					return;
				}
				
				var asNumber:Number = new Number((event.values[0] as String).replace(",","."));
				
				if (isNaN(asNumber)) {
					DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("settingsview","low_value"),
						ModelLocator.resourceManagerInstance.getString("calibrationservice","value_should_be_numeric"));
				} else {
					var asNumberInMGDL:Number = asNumber;
					if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) != "true") {
						asNumberInMGDL = (Math.round(BgReading.mmolToMgdl(asNumber)) * 10) / 10;
					}
					if (asNumberInMGDL > new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK))) {
						DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("settingsview","low_value"),
							ModelLocator.resourceManagerInstance.getString("settingsview","low_value_should_be_lower_than_high_value"));
					} else {
						CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK, asNumberInMGDL.toString());
						lowValueText = asNumber.toString();
					}
				}
			}
			
			private function changeHighValue_clickHandler(event:MouseEvent):void {
				rect17.color = uint("0xD3D3D3");
				rect18.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","high_value"))
					.addTextField("", ModelLocator.resourceManagerInstance.getString("settingsview","high_value"), false, CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true" ? 4:8)
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				alert.addEventListener(DialogViewEvent.CLOSED, highValueentered);
				DialogService.addDialog(alert);
			}
			
			private static function highValueentered(event:DialogViewEvent):void {
				if (event.index == 1) {
					return;
				}
				
				var asNumber:Number = new Number((event.values[0] as String).replace(",","."));
				
				if (isNaN(asNumber)) {
					DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("settingsview","high_value"),
						ModelLocator.resourceManagerInstance.getString("calibrationservice","value_should_be_numeric"));
				} else {
					var asNumberInMGDL:Number = asNumber;
					if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) != "true") {
						asNumberInMGDL = (Math.round(BgReading.mmolToMgdl(asNumber)) * 10) / 10;
					}
					if (asNumberInMGDL < new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK))) {
						DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("settingsview","high_value"),
							ModelLocator.resourceManagerInstance.getString("settingsview","high_value_should_be_higher_than_low_value"));
					} else {
						CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK, asNumberInMGDL.toString());
						highValueText = asNumber.toString();
					}
				}
			}
			
			private function alwaysOnNotification_clickHandler(event:MouseEvent):void {
				rect19.color = uint("0xD3D3D3");
				rect20.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_ALWAYS_ON_NOTIFICATION) == "true") {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_ALWAYS_ON_NOTIFICATION, "false");
					alwaysOnNotificationTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_ALWAYS_ON_NOTIFICATION, "true");
					alwaysOnNotificationTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function appInactiveAlert_clickHandler(event:MouseEvent):void {
				rectappinactive1.color = uint("0xD3D3D3");
				rectappinactive2.color = uint("0xD3D3D3");
				setResetColorTimer();

				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_APP_INACTIVE_ALERT) == "true") {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_APP_INACTIVE_ALERT, "false");
					appInactiveAlertTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_APP_INACTIVE_ALERT, "true");
					appInactiveAlertTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function overrideMute_clickHandler(event:MouseEvent):void {
				rectoverrideMute1.color = uint("0xD3D3D3");
				rectoverrideMute2.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_OVERRIDE_MUTE) == "true") {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_OVERRIDE_MUTE, "false");
					overrideMuteTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_OVERRIDE_MUTE, "true");
					overrideMuteTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			
			
			private function healthkitstore_clickHandler(event:MouseEvent):void {
				rect47.color = uint("0xD3D3D3");
				rect48.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_HEALTHKIT_STORE_ON) == "true") {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_HEALTHKIT_STORE_ON, "false");
					healthkitStoreOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_HEALTHKIT_STORE_ON, "true");
					healthkitStoreOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function lowAlert_clickHandler(event:MouseEvent):void {
				rect29.color = uint("0xD3D3D3");
				rect30.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","low_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_LOW_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_low_alert');
				dataToSend.isBgValue = true;
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_low_alert_list');
				dataToSend.keyboardtype = new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true" ? 4:8);
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
			}
			
			private function veryLowAlert_clickHandler(event:MouseEvent):void {
				rect43.color = uint("0xD3D3D3");
				rect44.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","very_low_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_VERY_LOW_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_very_low_alert');
				dataToSend.isBgValue = true;
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_very_low_alert_list');
				dataToSend.keyboardtype = new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true" ? 4:8);
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
			}
			
			private function veryHighAlert_clickHandler(event:MouseEvent):void {
				rect45.color = uint("0xD3D3D3");
				rect46.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","very_high_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_VERY_HIGH_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_very_high_alert');
				dataToSend.isBgValue = true;
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_very_high_alert_list');
				dataToSend.keyboardtype = new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true" ? 4:8);
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
			}
			
			private function calibrationRequestAlert_clickHandler(event:MouseEvent):void {
				rect41.color = uint("0xD3D3D3");
				rect42.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","calibration_request_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_CALIBRATION_REQUEST_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_calibration_request_alert');
				dataToSend.isBgValue = false;
				dataToSend.unit = ModelLocator.resourceManagerInstance.getString('alarmservice','hours');
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_calibration_request_alert');
				dataToSend.keyboardtype = new Number(4);
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
			}
			
			
			private function highAlert_clickHandler(event:MouseEvent):void {
				rect33.color = uint("0xD3D3D3");
				rect34.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","high_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_HIGH_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_high_alert');
				dataToSend.isBgValue = true;
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_high_alert');
				dataToSend.keyboardtype = new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true" ? 4:8);
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
			}
			
			private function missedReadingAlert_clickHandler(event:MouseEvent):void {
				rect35.color = uint("0xD3D3D3");
				rect36.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","missed_reading_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_MISSED_READING_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_missed_reading_alert');
				dataToSend.isBgValue = false;
				dataToSend.unit = ModelLocator.resourceManagerInstance.getString('alarmservice','minutes');
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_missed_reading_alert');
				dataToSend.keyboardtype = new Number(4);
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
			}
			
			private function batteryLowAlert_clickHandler(event:MouseEvent):void {
				rect39.color = uint("0xD3D3D3");
				rect40.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","battery_low_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_BATTERY_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_battery_low_alert');
				dataToSend.isBgValue = false;
				dataToSend.unit = " ";
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_battery_low_alert');
				dataToSend.hideValue = false;
				dataToSend.keyboardtype = new Number(4);
				navigator.pushView(FromtimeAndValueListView,dataToSend);
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_LOW_BATTERY_WARNING_GIVEN) == "false") {
					DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString('settingsview',"warning"),
						ModelLocator.resourceManagerInstance.getString('settingsview',"warn_and_info_low_battery"));
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_LOW_BATTERY_WARNING_GIVEN,"true");
				}
			}
			
			private function phoneMutedAlert_clickHandler(event:MouseEvent):void {
				rect37.color = uint("0xD3D3D3");
				rect38.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","phone_muted_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_PHONE_MUTED_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_phone_muted_alert');
				dataToSend.isBgValue = false;
				dataToSend.unit = "";
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_phone_muted_alert');
				dataToSend.hideValue = true;
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_PHONE_MUTED_WARNING_GIVEN) == "false") {
					DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString('settingsview',"warning"),
						ModelLocator.resourceManagerInstance.getString('settingsview',"warn_and_info_phone_muted"));
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_PHONE_MUTED_WARNING_GIVEN,"true");
				}
			}
			
			private function alertTypes_clickHandler(event:MouseEvent):void {
				rect31.color = uint("0xD3D3D3");
				rect32.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				navigator.pushView(AlertTypesView);
			}
			
			public static function requestNewTransmitterId(calledFromHomeView:Boolean = false):void {
				var title:String = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) + " " +
					ModelLocator.resourceManagerInstance.getString("transmitterservice","transmitter_id_settings_title");
				var message:String = "";
				if (!BlueToothDevice.isFollower()) {
					message = ModelLocator.resourceManagerInstance.getString("transmitterservice","enter_transmitter_id");
				} else {
					if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_AZURE_WEBSITE_NAME) == CommonSettings.DEFAULT_SITE_NAME) {
						nightScoutUrlChangeDialog();
					}
					return;
				}
				if (BlueToothDevice.isDexcomG4()) {
					message += " (5 characters)";
				} else if (BlueToothDevice.isDexcomG5()) {
					message += " (6 characters)";
				} else if (BlueToothDevice.isBluKon()) {
					message += " (BLUxxxxx) " + "\n" + ModelLocator.resourceManagerInstance.getString("transmitterservice","blukon_xxxxx_explanation");
				} 
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(title)
					.setMessage(message)
					.addTextField("",CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID))
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, transmitterIdEntered);
				
				function transmitterIdEntered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					var idLength:Number = BlueToothDevice.isDexcomG5() ? 6:
						(BlueToothDevice.isDexcomG4() ? 5: Number.NaN);
					
					if (!isNaN(idLength)) {
						if ((event.values[0] as String).length != idLength) {
							var alertMessage:String =
								(ModelLocator.resourceManagerInstance.getString("transmitterservice","transmitter_id_should_be_five_chars")).replace("{max}", idLength.toString());
							if (calledFromHomeView) {
								alertMessage += " " + (ModelLocator.resourceManagerInstance.getString("transmitterservice","set_transmitter_id_in_settings"));
							}
							DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("transmitterservice","enter_transmitter_id_dialog_title"),
								alertMessage);
							return;
						}					
					}
					
					if (BlueToothDevice.isBluKon()) {
						if (((event.values[0] as String).length != 8) || ((event.values[0] as String).toUpperCase().indexOf("BLU") < 0)) {
							var alertMessage:String =
								(ModelLocator.resourceManagerInstance.getString("transmitterservice","blukon_transmitter_id_should_be_five_chars")) + "\n" +
								(ModelLocator.resourceManagerInstance.getString("transmitterservice","blukon_xxxxx_explanation"));
							if (calledFromHomeView) {
								alertMessage += " " + (ModelLocator.resourceManagerInstance.getString("transmitterservice","set_transmitter_id_in_settings"));
							}
							DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("transmitterservice","enter_transmitter_id_dialog_title"),
								alertMessage);
							return;
						}
					}
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID, (event.values[0] as String).toUpperCase());
					transmitterIdText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID);
						
					//reset all battery levels
					resetAllTransmitterBatteryLevels();
				}
			}
			
			private function changeTransmitterId_clickHandler(event:MouseEvent):void {
				if (!BlueToothDevice.needsTransmitterId())
					return;
				rect21.color = uint("0xD3D3D3");
				rect22.color = uint("0xD3D3D3");
				setResetColorTimer();
				requestNewTransmitterId();
			}
			
			public function changeTransmitterType_clickHandler(event:MouseEvent = null):void {
				rect27.color = uint("0xD3D3D3");
				rect28.color = uint("0xD3D3D3");
				setResetColorTimer();
				changeTransmitterType();
			}
			
			public static function changeTransmitterType():void {
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_LICENSE_INFO_ACCEPTED) == "false") {
					HomeView.dialogServiceInitiated(null);
					return;
				}
				
				var selectedTransmitterType:int = 0;
				var currentType:String = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE);
				if (currentType.toUpperCase() == "G5") {
					selectedTransmitterType = 1;
				}else if (currentType.toUpperCase() == "BLUEREADER") {
					selectedTransmitterType = 2;
				} else if (currentType.toUpperCase() == "BLUKON") {
					selectedTransmitterType = 3;
				} else if (currentType.toUpperCase() == "TRANSMITER PL") {
					selectedTransmitterType = 4;
				} else if (currentType.toUpperCase() == "MIAOMIAO") {
					selectedTransmitterType = 5;
				} else if (currentType.toUpperCase() == "FOLLOW") {
					selectedTransmitterType = 6;
				} 
				var transmitterTypeNames:Array = new Array();
				transmitterTypeNames.push("G4", "G5", "Bluereader", "BluKon", "Transmiter PL", "MiaoMiao", "Follow");
				
				var picker:PickerDialogView = Dialog.service.create(
					new PickerDialogBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString('settingsview', 'transmittertype_picker_title'))
					.setCancelLabel(ModelLocator.resourceManagerInstance.getString("general","cancel"))
					.setAcceptLabel("Ok")
					.addColumn(transmitterTypeNames, selectedTransmitterType)
					.build()
				);
				
				picker.addEventListener( DialogViewEvent.CLOSED, picker_closedHandler );
				picker.show();
				
				function picker_closedHandler(event:DialogViewEvent): void {
					var newTransmitterType:String = event.values[0];
					if (newTransmitterType.toUpperCase() == currentType.toUpperCase())
						return;

					if (newTransmitterType.toUpperCase() != "FOLLOW" && !BlueToothDevice.isFollower()) {
						//when changing from or to follower, don't change the transmitter id
						//this allows the user to switch from follow to non-follow or vice versa, without having to reset the transmitter id
						if (newTransmitterType.toUpperCase() == "BLUKON" || newTransmitterType.toUpperCase() == "BLUCON" ) {
							CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID, "BLU00000");
							transmitterIdText = "BLU00000";
						} else {
							CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID, "00000");
							transmitterIdText = "00000";
						}
						resetAllTransmitterBatteryLevels();
						if (BlueToothDevice.isLimitter()) {
							DialogService.openSimpleDialog("Warning",
								"Limitter is not yet tested, if you want to support testing, please send me an e-mail");
						} 
					} else {
						//User is setting type to follow
						//If there's any transmitter id already set, no need to remove that, user may decide to re-use this device as receiver
						//also it could be that that device keeps receiving from the transmitter
					}
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE, newTransmitterType);
				}
			}
			
			private static function resetAllTransmitterBatteryLevels():void {
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G5_VOLTAGEA, "unknown");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G5_VOLTAGEB, "unknown");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G5_RESIST, "unknown");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G5_TEMPERATURE, "unknown");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G5_RUNTIME, "unknown");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G5_STATUS, "unknown");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G5_BATTERY_FROM_MARKER, "0");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G4_TRANSMITTER_BATTERY_VOLTAGE, "0");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_FSL_SENSOR_BATTERY_LEVEL, "0");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_BLUEREADER_BATTERY_LEVEL, "0");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_BLUKON_BATTERY_LEVEL, "0");
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_FSL_SENSOR_AGE, "0");
			}
			
			private function changeAppUpdates_clickHandler(event:MouseEvent):void {
				rectAppUpdate1.color = uint("0xD3D3D3");
				rectAppUpdate2.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_APP_UPDATE_NOTIFICATIONS_ON) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_APP_UPDATE_NOTIFICATIONS_ON, "false");
					checkUpdatesOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_APP_UPDATE_NOTIFICATIONS_ON, "true");
					checkUpdatesOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function NSLog_clickHandler(event:MouseEvent):void {
				rect25.color = uint("0xD3D3D3");
				rect26.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_NSLOG) == "true") {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_NSLOG, "false");
					nsLogOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_NSLOG, "true");
					nsLogOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function dexcomShareAccountName_clickHandler(event:MouseEvent):void {
				rect49.color = uint("0xD3D3D3");
				rect50.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_dexcom_share_account_name_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_dexcom_share_account_name_message"))
					.addTextField(dexcomShareAccountName,"")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, dexcomshareaccountentered);
				
				function dexcomshareaccountentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					
					if (event.values.length < 1)
						return;
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_ACCOUNTNAME, event.values[0] as String);
					dexcomShareAccountName = event.values[0] as String;
				}
			}
			
			private function dexcomSharePassword_clickHandler(event:MouseEvent):void {
				rect51.color = uint("0xD3D3D3");
				rect52.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_dexcom_share_password_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_dexcom_share_password_message"))
					.addTextField(dexcomSharePassword,"", true)
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, dexcomsharepasswordentered);
				
				function dexcomsharepasswordentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					
					if (event.values.length < 1)
						return;
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_PASSWORD, event.values[0] as String);
					dexcomSharePassword = event.values[0] as String;
					dexcomSharePasswordShownOnScreen = replaceByStars(dexcomSharePassword);
				}
			}

			private function dexcomShareSerialNumber_clickHandler(event:MouseEvent):void {
				rect53.color = uint("0xD3D3D3");
				rect54.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_dexcom_share_serialnumber_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_dexcom_share_serialnumber_message"))
					.addTextField(dexcomShareSerialNumber,"")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, dexcomshareserialnumberentered);
				
				function dexcomshareserialnumberentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					
					if (event.values.length < 1)
						return;
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_SERIALNUMBER, (event.values[0] as String).toUpperCase());
					dexcomShareSerialNumber = (event.values[0] as String).toUpperCase();
				}
			}
			
			private function dexcomShareOnOff_clickHandler(event:MouseEvent):void {
				rect55.color = uint("0xD3D3D3");
				rect56.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_ON) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_ON, "false");
					dexcomShareOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_ON, "true");
					dexcomShareOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
				changeDexcomShareStatus();
			}
			
			private function dexcomShareURL_clickHandler(event:MouseEvent):void {
				rect57.color = uint("0xD3D3D3");
				rect58.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_US_URL) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_US_URL, "false");
					dexcomShareURL = ModelLocator.resourceManagerInstance.getString('settingsview','dexcom_non_us_url');
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_US_URL, "true");
					dexcomShareURL = ModelLocator.resourceManagerInstance.getString('settingsview','dexcom_us_url');
				}
			}
			
			private function changeDexcomShareStatus():void {
				var enabled:Boolean = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DEXCOM_SHARE_ON) == "true";
				if (enabled) {
					dexcomShareAccountNameGroup.includeInLayout = true;
					dexcomShareAccountNameGroup.visible = true;
					dexcomShareAccountNameGroup.enabled = true;
					dexcomSharePasswordGroup.includeInLayout = true;
					dexcomSharePasswordGroup.enabled = true;
					dexcomSharePasswordGroup.visible = true;
					dexcomShareURLGroup.includeInLayout = true;
					dexcomShareURLGroup.visible = true;
					dexcomShareURLGroup.enabled = true;
					dexcomshareline1.includeInLayout = true;dexcomshareline1.visible = true;
					dexcomshareline3.includeInLayout = true;dexcomshareline3.visible = true;
					dexcomshareline2.includeInLayout = true;dexcomshareline2.visible = true;

					if (!BlueToothDevice.isDexcomG5()) {
						dexcomShareSerialNumberGroup.includeInLayout = true;
						dexcomShareSerialNumberGroup.enabled = true;
						dexcomShareSerialNumberGroup.visible = true;
						dexcomshareline4.includeInLayout = true;dexcomshareline4.visible = true;
					} else {
						dexcomShareSerialNumberGroup.includeInLayout = false;
						dexcomShareSerialNumberGroup.enabled = false;
						dexcomShareSerialNumberGroup.visible = false;
						dexcomshareline4.includeInLayout = false;dexcomshareline4.visible = false;
					}
				} else {
					dexcomShareAccountNameGroup.includeInLayout = false;
					dexcomShareAccountNameGroup.visible = false;
					dexcomShareAccountNameGroup.enabled = false;
					dexcomSharePasswordGroup.includeInLayout = false;
					dexcomSharePasswordGroup.enabled = false;
					dexcomSharePasswordGroup.visible = false;
					dexcomShareSerialNumberGroup.includeInLayout = false;
					dexcomShareSerialNumberGroup.enabled = false;
					dexcomShareSerialNumberGroup.visible = false;
					dexcomShareURLGroup.includeInLayout = false;
					dexcomShareURLGroup.visible = false;
					dexcomShareURLGroup.enabled = false;
					dexcomshareline1.includeInLayout = false;dexcomshareline1.visible = false;
					dexcomshareline2.includeInLayout = false;dexcomshareline2.visible = false;
					dexcomshareline3.includeInLayout = false;dexcomshareline3.visible = false;
					dexcomshareline4.includeInLayout = false;dexcomshareline4.visible = false;
				}
			}
			
			private function speakReadingsOnOff_clickHandler(event:MouseEvent):void {
				rect61.color = uint("0xD3D3D3");
				rect62.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_READINGS_ON) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_READINGS_ON, "false");
					speakReadingsOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
					changeSpeakReadingsStatus();
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_READINGS_ON, "true");
					speakReadingsOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
					changeSpeakReadingsStatus();
				}
				
				//Show initial popup with instructions
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_READINGS_ON) == "true" && LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_SPEECH_INSTRUCTIONS_ACCEPTED) == "false") {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle("Speech")
						.setMessage(ModelLocator.resourceManagerInstance.getString('settingsview', "speakreadingsinstructions"))
						.addOption(ModelLocator.resourceManagerInstance.getString('general', "ok"), DialogAction.STYLE_POSITIVE, 0)
						.addOption(ModelLocator.resourceManagerInstance.getString('general', "dont_show_again"), DialogAction.STYLE_CANCEL, 1)
						.build()
					);
					alert.addEventListener(DialogViewEvent.CLOSED, speechInstructionsShowed);
					DialogService.addDialog(alert);
				}
			}
			
			private function exportSidiary_clickHandler(event:MouseEvent):void {
				rectexportsidiary1.color = uint("0xD3D3D3");
				rectexportsidiary2.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				Export.exportSiDiary();
			}
			
			private static function speechInstructionsShowed(ev:DialogViewEvent):void 
			{
				if (ev != null) {
					if (ev.index == 1) 
					{
						//Don't warn the user again
						LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_SPEECH_INSTRUCTIONS_ACCEPTED, "true");
					}
				}
			}
			
			private function speakReadingsInterval_clickHandler(event:MouseEvent):void {
				rect59.color = uint("0xD3D3D3");
				rect60.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_speak_readings_interval_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_speak_readings_interval_message"))
					.addTextField(speakReadingsIntervalValue,"",false,4)
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, speakreadingsintervalentered);
				
				function speakreadingsintervalentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					
					if (event.values.length < 1)
						return;
					
					speakReadingsIntervalValue = event.values[0] as String;
					
					//Set interval to 1 in case the user sets it to 0 by mistake
					if(speakReadingsIntervalValue == "0")
						speakReadingsIntervalValue == "1";
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_READINGS_INTERVAL, speakReadingsIntervalValue as String);
				}
			}
			
			private function changeLanguage_clickHandler(event:MouseEvent):void {
				rectlanguage1.color = uint("0xD3D3D3");
				rectlanguage1.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var selectedLanguage:int = 0;
				var currentLanguage:String = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LANGUAGE);
				var languagePackDesc:Array = (ModelLocator.resourceManagerInstance.getString("texttospeech","ttslanguagelistdescription") as String).split(",");
				var languagePackCodes:Array = (ModelLocator.resourceManagerInstance.getString("texttospeech","ttslanguagelistcodes") as String).split(",");
				
				//Try to put the language picker in the corresponding position depending on the already previously selected language
				for(var i:int = 0; i < languagePackCodes.length; i++)
				{
					if(languagePackCodes[i] == currentLanguage)
					{
						selectedLanguage = i;
						break;
					}
				}
				
				//Create picker with language descriptions
				var picker:PickerDialogView = Dialog.service.create(
					new PickerDialogBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString('settingsview', 'speakreadingslanguagepickertitle'))
					.setCancelLabel(ModelLocator.resourceManagerInstance.getString("general","cancel"))
					.setAcceptLabel("Ok")
					.addColumn(languagePackDesc, selectedLanguage)
					.build()
				);
				
				picker.addEventListener( DialogViewEvent.CLOSED, picker_closedHandler );
				picker.show();
				
				function picker_closedHandler(event:DialogViewEvent): void 
				{
					//Get new language selected
					var newLanguageDesc:String = event.values[0];
					var newLanguageCode:String;
					
					//Find corresponding language code
					for(var i:int = 0; i < languagePackDesc.length; i++)
					{
						if(languagePackDesc[i] == newLanguageDesc)
						{
							//Found match, get corresponding language code
							newLanguageCode = languagePackCodes[i];
							break;
						}
					}
					
					//If user selected the same language as he had previously, then do nothing
					if (currentLanguage.toUpperCase() == newLanguageCode.toUpperCase())
						return;
					
					//Update selected language in text field and database
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_LANGUAGE, newLanguageCode);
					speakReadingsLanguageText = newLanguageDesc;
					
					//this will reset all language fields according to the language
					onInitialize();
				}
			}
			
			private function speakReadingsTrendOnOff_clickHandler(event:MouseEvent):void {
				rect63.color = uint("0xD3D3D3");
				rect64.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_TREND_ON) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_TREND_ON, "false");
					speakReadingsTrendOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_TREND_ON, "true");
					speakReadingsTrendOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function speakReadingsDeltaOnOff_clickHandler(event:MouseEvent):void {
				rect65.color = uint("0xD3D3D3");
				rect66.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_DELTA_ON) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_DELTA_ON, "false");
					speakReadingsDeltaOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_DELTA_ON, "true");
					speakReadingsDeltaOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function changeSpeakReadingsStatus():void {
				var enabled:Boolean = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_SPEAK_READINGS_ON) == "true";
				if (enabled) {
					speakIntervalNameGroup.includeInLayout = true;
					speakIntervalNameGroup.visible = true;
					speakIntervalNameGroup.enabled = true;
					speakreadingsline1.includeInLayout = true;speakreadingsline1.visible = true;
					speakTrendNameGroup.includeInLayout = true;
					speakTrendNameGroup.visible = true;
					speakTrendNameGroup.enabled = true;
					speakreadingsline3.includeInLayout = true;speakreadingsline3.visible = true;
					speakDeltaNameGroup.includeInLayout = true;
					speakDeltaNameGroup.visible = true;
					speakDeltaNameGroup.enabled = true;
					speakreadingsline4.includeInLayout = true;speakreadingsline4.visible = true;
				} else {
					speakIntervalNameGroup.includeInLayout = false;
					speakIntervalNameGroup.visible = false;
					speakIntervalNameGroup.enabled = false;
					speakreadingsline1.includeInLayout = false;speakreadingsline1.visible = false;
					speakTrendNameGroup.includeInLayout = false;
					speakTrendNameGroup.visible = false;
					speakTrendNameGroup.enabled = false;
					speakreadingsline3.includeInLayout = false;speakreadingsline3.visible = false;
					speakDeltaNameGroup.includeInLayout = false;
					speakDeltaNameGroup.visible = false;
					speakDeltaNameGroup.enabled = false;
					speakreadingsline4.includeInLayout = false;speakreadingsline4.visible = false;
				}
			}
			
			private function setResetColorTimer():void {
				if (resetColorTimer != null)
					if (resetColorTimer.running) {
						resetColorTimer.stop();					
					}
				
				resetColorTimer = new Timer(100, 1);
				resetColorTimer.addEventListener(TimerEvent.TIMER, resetColor);
				resetColorTimer.start();
				
				function resetColor(event:Event):void {
					rect1.color = uint("0x212121");
					rect2.color = uint("0x212121");
					rect3.color = uint("0x212121");
					rect4.color = uint("0x212121");
					rect7.color = uint("0x212121");
					rect8.color = uint("0x212121");
					rect9.color = uint("0x212121");
					rect10.color = uint("0x212121");
					rect13.color = uint("0x212121");
					rect14.color = uint("0x212121");
					rect15.color = uint("0x212121");
					rect16.color = uint("0x212121");
					rect17.color = uint("0x212121");
					rect18.color = uint("0x212121");
					rect19.color = uint("0x212121");
					rect20.color = uint("0x212121");
					rect21.color = uint("0x212121");
					rect22.color = uint("0x212121");
					rect23.color = uint("0x212121");
					rect24.color = uint("0x212121");
					rect25.color = uint("0x212121");
					rect26.color = uint("0x212121");
					rect27.color = uint("0x212121");
					rect28.color = uint("0x212121");
					rect29.color = uint("0x212121");
					rect30.color = uint("0x212121");
					rect31.color = uint("0x212121");//alert types
					rect32.color = uint("0x212121");//alert types
					rect33.color = uint("0x212121");//high alert
					rect34.color = uint("0x212121");//high alert
					rect35.color = uint("0x212121");//missed reading alert
					rect36.color = uint("0x212121");//missed reading alert
					rect37.color = uint("0x212121");//phone muted alert
					rect38.color = uint("0x212121");//phone muted alert
					rect39.color = uint("0x212121");//battery low alert
					rect40.color = uint("0x212121");//battery low alert
					rect41.color = uint("0x212121");//calibration request alert
					rect42.color = uint("0x212121");//calibration request alert
					rect43.color = uint("0x212121");//very low
					rect44.color = uint("0x212121");//very low
					rect45.color = uint("0x212121");//very high
					rect46.color = uint("0x212121");//very high
					rect47.color = uint("0x212121");//healthkitstore
					rect48.color = uint("0x212121");//healthkitstore
					rect49.color = uint("0x212121");//dexcom share accountname
					rect50.color = uint("0x212121");//dexcom share accountname
					rect51.color = uint("0x212121");//dexcom share password
					rect52.color = uint("0x212121");//dexcom share password
					rect53.color = uint("0x212121");//dexcom share serial number
					rect54.color = uint("0x212121");//dexcom share serial number
					rect55.color = uint("0x212121");//dexcom share onoff
					rect56.color = uint("0x212121");//dexcom share onoff
					rect57.color = uint("0x212121");//dexcom share onoff
					rect58.color = uint("0x212121");//dexcom share onoff
					rect59.color = uint("0x212121");//speech onoff
					rect60.color = uint("0x212121");//speech onoff
					rect61.color = uint("0x212121");//speech onoff
					rect62.color = uint("0x212121");//speech onoff
					rect63.color = uint("0x212121");//speech trend
					rect64.color = uint("0x212121");//speech trend
					rect65.color = uint("0x212121");//speech delta
					rect66.color = uint("0x212121");//speech delta
					rectlanguage1.color = uint("0x212121");//language
					rectlanguage2.color = uint("0x212121");//language
					rectAppUpdate1.color = uint("0x212121");//updates onoff
					rectAppUpdate2.color = uint("0x212121");//updates onoff
					rectoverrideMute1.color = uint("0x212121");//mute
					rectoverrideMute2.color = uint("0x212121");//mute
					rectexportsidiary1.color = uint("0x212121");
					rectexportsidiary2.color = uint("0x212121");
					rectappinactive1.color = uint("0x212121");
					rectappinactive2.color = uint("0x212121");
				}
			}
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				//ModelLocator.navigator = navigator;
			}
			
		]]>
	</fx:Script>
	<s:Scroller width="100%" height="100%" >
		<s:VGroup width="100%" paddingTop="10">
	
			<!-- Chapter general settings -->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','general_settings')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="10" paddingBottom ="10"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			<!-- Chapter general settings Subsection chosen unit -->
			<s:VGroup click="changeUnit_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect13"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','unit')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{chosenUnitText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect14"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			<!-- Chapter general settings Subsection low value -->
			<s:VGroup click="changeLowValue_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect15"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','low_value')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{lowValueText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect16"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			<!-- Chapter general settings Subsection high value -->
			<s:VGroup click="changeHighValue_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect17"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','high_value')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{highValueText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect18"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection Always HomeScreen Notification -->
			<s:VGroup click="alwaysOnNotification_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect19"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','always_on_notification')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{alwaysOnNotificationTextOnOrOff}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect20"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter general settings store in healthkit -->
			<s:VGroup click="healthkitstore_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect47"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','store_in_healthkit')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{healthkitStoreOnOrOff}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect48"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter general settings Subsection transmitter type -->
			<s:VGroup click="changeTransmitterType_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect27"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','transmitter_type_settings_title')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{transmitterTypeText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect28"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter general settings Subsection transmitter Id -->
			<s:VGroup id="groupTransmitterId" click="changeTransmitterId_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect21"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('transmitterservice','transmitter_id_settings_title')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{transmitterIdText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect22"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
			
			<!-- Chapter general settings Subsection App Updates -->
			<s:VGroup id="groupAppUpdates"  width="100%">
				<s:HGroup click="changeAppUpdates_clickHandler(event)" width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rectAppUpdate1"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','checkappupdatesonoff')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{checkUpdatesOnOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rectAppUpdate2"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
			</s:VGroup>
			
			<!-- Chapter general settings Subsection Application Language -->
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
				</s:stroke>
			</s:Line>
			<s:HGroup click="changeLanguage_clickHandler(event)" width="100%" id = "languageNameGroup">
				<s:Rect height="100%" width="5" >
					<s:fill>
						<s:SolidColor color="#212121" id="rectlanguage1"/>
					</s:fill>
				</s:Rect>
				<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','speakreadingslanguagetitle')}"
						 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
				<s:Label text = "{speakReadingsLanguageText}"  
						 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
				<s:Rect height="100%" width="5" >
					<s:fill>
						<s:SolidColor color="#212121" id="rectlanguage2"/>
					</s:fill>
				</s:Rect>
			</s:HGroup>

			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>	

			<!-- Chapter Alerts-->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','alerts')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="10" paddingBottom ="10"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Alerts Subsection Alert Types -->
			<s:VGroup click="alertTypes_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect31"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','alert_types')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect32"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#FFFFFF" weight="1"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter Alerts Subsection Override mute -->
			<s:VGroup click="overrideMute_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rectoverrideMute1"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','override_mute')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{overrideMuteTextOnOrOff}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rectoverrideMute2"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#FFFFFF" weight="1"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter Alerts Subsection Calibration Request-->
			<s:VGroup click="calibrationRequestAlert_clickHandler(event)" width="100%" id = "calibrationalertgroup">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect41"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','calibration_request_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect42"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection Low -->
			<s:VGroup click="lowAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect29"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','low_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect30"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection Very Low -->
			<s:VGroup click="veryLowAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect43"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','very_low_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect44"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection High -->
			<s:VGroup click="highAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect33"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','high_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect34"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection Very High -->
			<s:VGroup click="veryHighAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect45"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','very_high_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect46"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection Missed Reading -->
			<s:VGroup click="missedReadingAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect35"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','missed_reading_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect36"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter Alerts Subsection Battery low -->
			<s:VGroup click="batteryLowAlert_clickHandler(event)" width="100%" id="batteryalertgroup">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect39"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','battery_low_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect40"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter Alerts Subsection Phone Muted -->
			<s:VGroup click="phoneMutedAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect37"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','phone_muted_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect38"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection application inactive alert -->
			<s:VGroup click="appInactiveAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rectappinactive1"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','app_inactive_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{appInactiveAlertTextOnOrOff}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rectappinactive2"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0X3B6999" weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter NightScout -->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','show_nightscout_title')}" textAlign="center" color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="10" paddingBottom ="10"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke  color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Nightscout url and api secret --> 
			<s:VGroup width="100%">
				<!-- button to change url -->
				<s:HGroup click="nightScoutUrl_clickHandler(event)" width="100%" verticalAlign="bottom">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect1"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','url')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{nightScoutUrl}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect2"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to change api secret -->
				<s:HGroup click="nightScoutApiSecret_clickHandler(event)" width="100%" verticalAlign="bottom">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect3"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','api_secret')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{nightScoutAPI_SECRET}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect4"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Dexcom Share -->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','show_dexcomshare_title')}" textAlign="center" color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="10" paddingBottom ="10"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke  color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter on/off button accountname, password and serial number --> 
			<s:VGroup width="100%">
				<!-- button to change dexcom share onoff -->
				<s:HGroup click="dexcomShareOnOff_clickHandler(event)" width="100%" verticalAlign="bottom">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect55"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','dexcomshareonoff')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{dexcomShareOnOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect56"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%"  id = "dexcomshareline3">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<s:HGroup click="dexcomShareAccountName_clickHandler(event)" width="100%" verticalAlign="bottom" id = "dexcomShareAccountNameGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect49"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','dexcomshareaccountname')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{dexcomShareAccountName}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect50"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%" id = "dexcomshareline1">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to change dexcom share password -->
				<s:HGroup click="dexcomSharePassword_clickHandler(event)" width="100%" verticalAlign="bottom" id = "dexcomSharePasswordGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect51"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','dexcomsharepassword')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{dexcomSharePasswordShownOnScreen}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect52"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%" id = "dexcomshareline2">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to change dexcom share url -->
				<s:HGroup click="dexcomShareURL_clickHandler(event)" width="100%" verticalAlign="bottom" id = "dexcomShareURLGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect57"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{dexcomShareURL}" width="100%"
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect58"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%" id = "dexcomshareline4">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to change dexcom share serial number -->
				<s:HGroup click="dexcomShareSerialNumber_clickHandler(event)" width="100%" verticalAlign="bottom" id = "dexcomShareSerialNumberGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect53"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','dexcomshareserialnumber')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{dexcomShareSerialNumber}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect54"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Speech -->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','show_speak_readings_title')}" textAlign="center" color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="10" paddingBottom ="10"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke  color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter on/off button, interval, trend and delta --> 
			<s:VGroup width="100%">
				<!-- button to change speak readings onoff -->
				<s:HGroup click="speakReadingsOnOff_clickHandler(event)" width="100%" verticalAlign="bottom">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect59"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','speakreadingsonoff')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{speakReadingsOnOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect60"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%"  id = "speakreadingsline1">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<s:HGroup click="speakReadingsTrendOnOff_clickHandler(event)" width="100%" verticalAlign="bottom" id="speakTrendNameGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect63"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','speakreadingstrendonoff')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{speakReadingsTrendOnOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect64"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%"  id = "speakreadingsline3">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<s:HGroup click="speakReadingsDeltaOnOff_clickHandler(event)" width="100%" verticalAlign="bottom"  id = "speakDeltaNameGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect65"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','speakreadingsdeltaonoff')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{speakReadingsDeltaOnOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect66"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%"  id = "speakreadingsline4">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<s:HGroup click="speakReadingsInterval_clickHandler(event)" width="100%" verticalAlign="bottom" id = "speakIntervalNameGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect61"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','speakreadingsinterval')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{speakReadingsIntervalValue}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect62"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>

			<!-- Chapter Export --> 
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','export')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="10" paddingBottom ="10"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Export subsection SiDiary --> 
			<s:VGroup width="100%" >
				<s:HGroup id="sidiaryexport" width="100%" click="exportSidiary_clickHandler(event)">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rectexportsidiary1"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "SiDiary" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rectexportsidiary2"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
			
			<!-- Chapter Version info --> 
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','versioninfo')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="10" paddingBottom ="10"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>

			<!-- Chapter Version info subsection version --> 
			<s:VGroup width="100%" >
				<!-- button to enable tracing -->
				<s:HGroup id="groupInfo" width="100%" >
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect23"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','version')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{versionText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect24"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
			
			<!-- Chapter Logging and Tracing-->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','logging_and_tracing')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="10" paddingBottom ="10"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Logging and Tracing  Subsection Tracing --> 
			<s:VGroup width="100%" visible="true" enabled="true">
				<!-- button to enable tracing -->
				<s:HGroup id="groupEnableAndDisableTracing" click="detailedTracing_clickHandler(event)" width="100%" >
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect7"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','detailed_tracing')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{detailedTracingOnOrOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect8"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to send tracing via e-mail -->
				<s:HGroup id="groupsendTracingViaEmail" click="sendTracingViaEmail_clickHandler(event)" width="100%" >
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect9"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','send_tracing_via_email')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect10"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter Logging and Tracing  Subsection NSLog -->
			<s:VGroup click="NSLog_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect25"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','ns_logging')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{nsLogOnOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect26"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter XYZ-->
		</s:VGroup>
	</s:Scroller>
</s:View>

